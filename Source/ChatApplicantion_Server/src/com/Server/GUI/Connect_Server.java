/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Server.GUI;


import com.Server.Source.ServerRoom;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import me.alexpanov.net.FreePortFinder;
/**
 *
 * @author ASUS
 */
public class Connect_Server extends javax.swing.JFrame {

    /**
     * Creates new form Connect_Server
     */
    public Connect_Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Console = new javax.swing.JTextArea();
        ConnectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 204));

        Console.setBackground(new java.awt.Color(51, 51, 51));
        Console.setColumns(20);
        Console.setForeground(new java.awt.Color(255, 255, 255));
        Console.setRows(5);
        jScrollPane1.setViewportView(Console);

        ConnectButton.setBackground(new java.awt.Color(204, 0, 51));
        ConnectButton.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        ConnectButton.setForeground(new java.awt.Color(51, 51, 51));
        ConnectButton.setText("Kết Nối");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        if(ConnectButton.getText().equals("Kết Nối")){
            start();
            exit = false;
            ConnectButton.setText("Hủy Kết Nối");
            System.out.println("Hủy Kết Nối");
        }else{
            try {
                exit = true;
                stop();
            } catch (IOException ex) {
                Logger.getLogger(Connect_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            ConnectButton.setText("Kết Nối");
            System.out.println("Kết Nối");
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed
               
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Connect_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Connect_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Connect_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Connect_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Connect_Server().setVisible(true);
            }
        });
    }
    
    
    private static int getRandomPort() {
		int port = FreePortFinder.findFreeLocalPort();
		return port;
    }
    public static void start() {
		new Thread(new ServerHandler()).start();
	}
    public static void stop() throws IOException {
		if (!serverMain.isClosed()) serverMain.close();
	}
    private static void broadcastMessage(String message) throws IOException {
		for (ObjectOutputStream p: connectedClients.values()) {
			p.writeObject(message+"\n");
		}
	}

   
    private static class ServerHandler implements Runnable{
		@Override
		public void run() {
			try {
				serverMain = new ServerSocket(PORT);
				Console.append(" "+"Server started on port: " + PORT);
				Console.append("\n"+"Now listening for connections...");
				while(!exit) {
					if (connectedClients.size() <= 100){
						new Thread(new ClientHandler(serverMain.accept())).start();
					}
				}
			}
			catch (Exception e) {
				
				Console.append("\n"+"\nExiting...");
			}
		}
	}
    
    private static class ClientHandler implements Runnable {
		private Socket socket;
		private ObjectOutputStream out;
		private ObjectInputStream in;
		private String name;
		String command;
		public ClientHandler(Socket socket) {
			this.socket = socket;
		}
		
		@Override
		public void run(){
                        Console.append("\n"+ format.format(new Date())+ "Client connected: " + socket.getInetAddress());
			try {
				in = new ObjectInputStream(socket.getInputStream());
				out = new ObjectOutputStream(socket.getOutputStream());
				for(;;) {
					name = (String)in.readObject();
                                        System.out.println(name);
					if (name == null) {
						return;
					}
					synchronized (connectedClients) {
                                            String h = "INVALIDNAME";
						if (!name.isEmpty() && !connectedClients.keySet().contains(name)) {
                                                    connectedClients.put(name, out);
                                                    break;
                                                }
						else {out.writeObject(h);
                                                    return;
                                                }
                                        }
				}
                                Console.append("\n"+format.format(new Date())+" "+name.toUpperCase() + " has joined ");
                                Console.append("\n"+format.format(new Date())+ "[SYSTEM] : "+ name.toUpperCase()+"  " +" \n");
				
				command = "List";
                                if(command.equals("List")){
                                    for (ObjectOutputStream p: connectedClients.values()) {
                                    p.writeObject(command);
                                    p.writeObject(DSonline());
                                    }         
                                }
                                command = "roomList";
                                if(command.equals("roomList")){
                                    for (ObjectOutputStream p: connectedClients.values()) {
                                    p.writeObject(command);
                                    p.writeObject(DSroom());
                                    }         
                                }
                                String message = "";
				while ((message = (String)in.readObject()) != null && !exit) {
                                        System.out.println(" " + message);
					if (!message.isEmpty()) {
						if (message.toLowerCase().equals("/quit")) break;
						if(message.equals("Create")){
                                                    String temp = (String)in.readObject();
                                                    String[] str = temp.split(" ");
                                                    int port= getRandomPort();
                                                   synchronized (connectedRoom) {
                                                    String h = "INVALIDNAME \n";
                                                    if (connectedRoom.keySet().contains(str[1])) {
                                                        Console.append("\n"+format.format(new Date())+ " "+ str[1] + " error" );
                                                    }else{
                                                            ServerRoom h1 = new ServerRoom(port,str[1]);
                                                            new Thread(h1).start();
                                                            connectedRoom.put(str[1], h1 ); 
                                                          
                                                            Console.append("\n"+format.format(new Date())+ " "+ str[1] + " create with port " + port);
                                                                 
                                                    }}
                                                      out.writeObject("Connect");
                                                      out.writeObject(port);
                                                      connectedClients.get(str[0]).writeObject("Connect");
                                                      connectedClients.get(str[0]).writeObject(port); 
                                                      command = "roomList";
                                                        if(command.equals("roomList")){
                                                        for (ObjectOutputStream p: connectedClients.values()) {
                                                        p.writeObject(command);
                                                        p.writeObject(DSroom());
                                                        
                                                        }         
                                                    }
                                                }
                                                if(message.equals("Connect")){
                                                 String temp = (String)in.readObject();   
                                                 int port= getRandomPort();
                                                 ServerRoom h1 = new ServerRoom(port,temp+" and "+name);
                                                 new Thread(h1).start();
                                                 out.writeObject("Connect");
                                                 out.writeObject(port);
                                                 connectedClients.get(temp).writeObject("Connect");
                                                 connectedClients.get(temp).writeObject(port);      
                                                  command = "roomList";
                                                 for (ObjectOutputStream p: connectedClients.values()) {
                                                        p.writeObject(command);
                                                        p.writeObject(DSroom());
                                                        }    
                                                }
                                                if(message.equals("Add")){
                                                 String temp = (String)in.readObject();
                                                 out.writeObject("Connect");
                                                 out.writeObject(connectedRoom.get(temp).PORT);
                                                  command = "roomList";
                                                 for (ObjectOutputStream p: connectedClients.values()) {
                                                        p.writeObject(command);
                                                        p.writeObject(DSroom());
                                                        }  
                                                }
                                                message ="";
                                                
					}
				}
			} catch (Exception e) {
				        System.out.println( e.getMessage());
                                        
			} finally {
				if (name != null) {
					connectedClients.remove(name);
                                        Console.append("\n"+format.format(new Date())+" : "+name + " has left \n");   
                                        command = "List";
                                        if(command.equals("List")){
                                        for (ObjectOutputStream p: connectedClients.values()) {
                                            try {
                                                p.writeObject(command);
                                                p.writeObject(DSonline());
                                            } catch (IOException ex) {
                                                Logger.getLogger(Connect_Server.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }         
                                        }
					
				}
			}
		}
	}
    
    public static List<String> DSonline(){
        List<String> h = new ArrayList<>();
        
        for (Map.Entry<String, ObjectOutputStream> entry : connectedClients.entrySet()) {
            Object key = entry.getKey();
            h.add((String)key);
            
        }
        return h;
    }
    public static List<String> DSroom(){
        List<String> h = new ArrayList<>();
        
        for (Map.Entry<String, ServerRoom> entry : connectedRoom.entrySet()) {
            Object key = entry.getKey();
            h.add((String)key);
            
        }
        return h;
    }
    public static void refeshRoom(){
        for (Map.Entry<String, ServerRoom> entry : connectedRoom.entrySet()) {
            if(entry.getValue() != null){
               if(entry.getValue().getserver() == null){
                   connectedRoom.remove(entry.getKey(), entry.getValue());
               }
            }else{
                 connectedRoom.remove(entry.getKey(), entry.getValue());
            }
            
        }
    }
    
    

    private static HashMap<String,ServerRoom> connectedRoom = new HashMap<>();
    private static HashMap<String, ObjectOutputStream> connectedClients = new HashMap<>();
    private static ServerSocket serverMain;
    public static final int PORT = 8080;
    private static boolean exit = false;
    public static SimpleDateFormat format = new SimpleDateFormat("[hh:mm a]");
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private static javax.swing.JTextArea Console;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
