/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Client.GUI;


import com.Data.FileInfo;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author ASUS
 */
public class ChatForm extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form ChatForm
     */
    public ChatForm(int port, String user) throws InterruptedException {
        PORT = port;
        UserName = user;
        initComponents();
        
        
    }
     @Override
    public void run() {
        
        try {
            Thread.sleep(100);
        } catch (InterruptedException ex) {
            Logger.getLogger(ChatForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        start();
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChooserFile = new javax.swing.JFileChooser();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameRoom = new javax.swing.JLabel();
        Pane = new javax.swing.JPanel();
        MicButton = new javax.swing.JButton();
        CamButton = new javax.swing.JButton();
        emotion = new javax.swing.JButton();
        emojiPane = new javax.swing.JPanel();
        happy = new javax.swing.JLabel();
        like = new javax.swing.JLabel();
        Love = new javax.swing.JLabel();
        Anrgy = new javax.swing.JLabel();
        Wow = new javax.swing.JLabel();
        Sad = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        sFileButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        InputMessage = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ViewMessage = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(51, 255, 0));
        setSize(new java.awt.Dimension(693, 874));

        jPanel1.setBackground(new java.awt.Color(204, 255, 0));

        jPanel3.setBackground(new java.awt.Color(255, 255, 0));

        jLabel1.setBackground(new java.awt.Color(0, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/icons8-saitama-50.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        nameRoom.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        nameRoom.setText("Tên Phòng");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nameRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nameRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        Pane.setBackground(new java.awt.Color(0, 255, 102));

        MicButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/3536210891586786419-24.png"))); // NOI18N
        MicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MicButtonActionPerformed(evt);
            }
        });

        CamButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/13833573411535694876-24.png"))); // NOI18N
        CamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CamButtonActionPerformed(evt);
            }
        });

        emotion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/15543183741530273517-24.png"))); // NOI18N
        emotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emotionActionPerformed(evt);
            }
        });

        emojiPane.setBackground(new java.awt.Color(0, 255, 0));
        emojiPane.setVisible(false);

        happy.setBackground(new java.awt.Color(255, 255, 255));
        happy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        happy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/emoji/happy.png"))); // NOI18N
        happy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                happyMouseClicked(evt);
            }
        });

        like.setBackground(new java.awt.Color(51, 204, 255));
        like.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        like.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/emoji/like.png"))); // NOI18N
        like.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                likeMouseClicked(evt);
            }
        });

        Love.setBackground(new java.awt.Color(255, 255, 255));
        Love.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Love.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/emoji/Love.png"))); // NOI18N
        Love.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LoveMouseClicked(evt);
            }
        });

        Anrgy.setBackground(new java.awt.Color(255, 255, 255));
        Anrgy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Anrgy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/emoji/Angry.png"))); // NOI18N
        Anrgy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AnrgyMouseClicked(evt);
            }
        });

        Wow.setBackground(new java.awt.Color(255, 255, 255));
        Wow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Wow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/emoji/Wow.png"))); // NOI18N
        Wow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WowMouseClicked(evt);
            }
        });

        Sad.setBackground(new java.awt.Color(255, 255, 255));
        Sad.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Sad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/emoji/sad.png"))); // NOI18N
        Sad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout emojiPaneLayout = new javax.swing.GroupLayout(emojiPane);
        emojiPane.setLayout(emojiPaneLayout);
        emojiPaneLayout.setHorizontalGroup(
            emojiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emojiPaneLayout.createSequentialGroup()
                .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(happy, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Love, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Anrgy, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Wow, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Sad, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        emojiPaneLayout.setVerticalGroup(
            emojiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emojiPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(emojiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(happy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Love, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Anrgy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Wow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Sad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(like, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout PaneLayout = new javax.swing.GroupLayout(Pane);
        Pane.setLayout(PaneLayout);
        PaneLayout.setHorizontalGroup(
            PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emotion)
                .addGap(18, 18, 18)
                .addComponent(MicButton)
                .addGap(18, 18, 18)
                .addComponent(CamButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(emojiPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );
        PaneLayout.setVerticalGroup(
            PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(emojiPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emotion, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(102, 255, 102));

        sFileButton.setBackground(new java.awt.Color(255, 255, 0));
        sFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/send-file-16.png"))); // NOI18N
        sFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sFileButtonActionPerformed(evt);
            }
        });

        sendButton.setBackground(new java.awt.Color(255, 255, 51));
        sendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Client/img/icons8-email-send-16.png"))); // NOI18N
        sendButton.setToolTipText("");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        InputMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputMessageActionPerformed(evt);
            }
        });
        InputMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InputMessageKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InputMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sFileButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InputMessage)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        ViewMessage.setFont(new Font("Arial",Font.PLAIN,13));
        jScrollPane2.setViewportView(ViewMessage);
        ViewMessage.setEditable(false);

        jPanel4.setPreferredSize(new Dimension(700,889));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Pane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sFileButtonActionPerformed

        if( ChooserFile.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
        File f = ChooserFile.getSelectedFile();
        String filename = f.getPath();
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->File");
        try {
            sendFile(filename, "");
        } catch (IOException ex) {
            Logger.getLogger(ChatForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        }       
    }//GEN-LAST:event_sFileButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String mess = InputMessage.getText().trim();
        if(!mess.isEmpty()){
            System.out.println(String.valueOf(PORT)+ " "+format.format(new Date())+" [" +UserName+"] : "+mess);
            out.println( format.format(new Date())+" [" +UserName+"]  : "+mess + "\n");
          //  ViewMessage.append(format.format(new Date())+" [" +UserName+"]  "+mess+"\n");
            InputMessage.setText("");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void InputMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputMessageActionPerformed
      
    }//GEN-LAST:event_InputMessageActionPerformed

    private void InputMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputMessageKeyPressed
        String mess = InputMessage.getText().trim();
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            System.out.println(format.format(new Date())+" [" +UserName+"] : "+mess);
            out.println( format.format(new Date())+" [" +UserName+"]  : "+mess +"\n");
            InputMessage.setText("");
        }
    }//GEN-LAST:event_InputMessageKeyPressed

    private void emotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emotionActionPerformed
        if(emojiPane.isVisible() == true ){
            emojiPane.setVisible(false);
                
        }else{
            emojiPane.setVisible(true);
        }
    }//GEN-LAST:event_emotionActionPerformed

    private void likeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_likeMouseClicked
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->emoji");
        out.println("/com/Client/img/emoji/like.png");  
    }//GEN-LAST:event_likeMouseClicked

    private void happyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_happyMouseClicked
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->emoji");
        out.println("/com/Client/img/emoji/happy.png");  
    }//GEN-LAST:event_happyMouseClicked

    private void LoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoveMouseClicked
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->emoji");
        out.println("/com/Client/img/emoji/Love.png");  
    }//GEN-LAST:event_LoveMouseClicked

    private void AnrgyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AnrgyMouseClicked
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->emoji");
        out.println("/com/Client/img/emoji/Angry.png");  
    }//GEN-LAST:event_AnrgyMouseClicked

    private void WowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WowMouseClicked
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->emoji");
        out.println("/com/Client/img/emoji/Wow.png");  
    }//GEN-LAST:event_WowMouseClicked

    private void SadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SadMouseClicked
        out.println( format.format(new Date())+" [" +UserName+"]  : ");
        out.println("->emoji");
        out.println("/com/Client/img/emoji/sad.png");  
    }//GEN-LAST:event_SadMouseClicked

    private void MicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MicButtonActionPerformed
        JOptionPane.showMessageDialog(null, " Tính Năng chưa hoàn thiện");
    }//GEN-LAST:event_MicButtonActionPerformed

    private void CamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CamButtonActionPerformed
        JOptionPane.showMessageDialog(null, " Tính Năng chưa hoàn thiện");
    }//GEN-LAST:event_CamButtonActionPerformed
    public void start() {
        try {
            clientSocket = new Socket("localhost", PORT);
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            out.println(UserName);
            new Thread(new Listener(clientSocket)).start();
            } catch (Exception err) {
			System.err.println( err.getLocalizedMessage());
            }
	}
    public void stop(){
	if(!clientSocket.isClosed()) {
            try {
		clientSocket.close();
            } catch (IOException e1) {}
	}
	}
    private class Listener implements Runnable {
	private BufferedReader in;
        public Socket ListenSocket;
        public  Listener(Socket soc){
            this.ListenSocket = soc;
        }
        public Socket getSoc(){
            return ListenSocket;
        }
	@Override
	public void run() {
            try {
		in = new BufferedReader(new InputStreamReader(ListenSocket.getInputStream(),"utf-8"));
		String read = null;
                read = in.readLine();
                nameRoom.setText(read);
                read = null;
		for(;;) {
                    read = in.readLine();
                    if (read != null && !(read.isEmpty())) {
                    if(read.equals("->emoji")){
                        String URL = in.readLine();
                        StyledDocument doc = (StyledDocument) ViewMessage.getDocument();
                        Style style = doc.addStyle("StyleName", null);
                        StyleConstants.setIcon(style, new ImageIcon(getClass().getResource(URL)));
                        try{
                            doc.insertString(doc.getLength(), "\n", style);
                        }catch (BadLocationException ex) {System.err.println(ex);}
                    }else if(read.equals("->File")){
                                                
                        ChooserFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                        if(ChooserFile.showSaveDialog(null) == JFileChooser.APPROVE_OPTION){
                            ObjectInputStream    ois = new ObjectInputStream(ListenSocket.getInputStream());
                            System.out.println((String)ois.readObject());
                            FileInfo fileInfo = (FileInfo) ois.readObject();
                            System.out.println(fileInfo.getFilename()+ " " );
                            System.err.println("  " + ChooserFile.getSelectedFile().getAbsolutePath());
                            fileInfo.setDestinationDirectory(ChooserFile.getSelectedFile().getAbsolutePath());
                            if (fileInfo != null) {
                                 createFile(fileInfo);
                                                    }
                        }}else{      
                                System.out.println(read);
                                StyledDocument doc = (StyledDocument) ViewMessage.getDocument();
                                Style style = doc.addStyle("StyleName", null);
                                doc.insertString(doc.getLength(), "\n "+read +"\n", style);
                            }
                        read = "";
                    }
		}
		} catch (IOException e) {
                 System.out.println(e);
		return;
		} catch (BadLocationException ex) {
                        Logger.getLogger(ChatForm.class.getName()).log(Level.SEVERE, null, ex);
               } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ChatForm.class.getName()).log(Level.SEVERE, null, ex);
                }   
		}

	}
  
    // process FILE
    private boolean createFile(FileInfo fileInfo) throws IOException { // phần này kham khảo trên viettus
        BufferedOutputStream bos = null;
         
        try {
            if (fileInfo != null) {
                File fileReceive = new File(fileInfo.getDestinationDirectory() +
                        "\\"+ fileInfo.getFilename());
                bos = new BufferedOutputStream(
                        new FileOutputStream(fileReceive));
               
                bos.write(fileInfo.getDataBytes());
                bos.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        } finally {
            if(bos != null)
            bos.close();
        }
        return true;
    }
    public void sendFile(String sourceFilePath, String destinationDir) throws IOException { // phần này kham khảo trên viettus
        DataOutputStream outToServer = null;
        ObjectOutputStream oos = null;
        ObjectInputStream ois = null;
 
        try {
            FileInfo fileInfo = getFileInfo(sourceFilePath, destinationDir);
            System.out.println(fileInfo.getFilename()+ " " );
            oos = new ObjectOutputStream(clientSocket.getOutputStream());
            
            oos.writeObject(fileInfo);

        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            // close all stream
            
            if(ois != null)
            ois.close();
            if(outToServer != null)
            outToServer.close();
            
        }
    }
 
   
    private FileInfo getFileInfo(String sourceFilePath, String destinationDir) throws IOException {// phần này kham khảo trên viettus
        FileInfo fileInfo = null;
        BufferedInputStream bis = null;
        try {
            File sourceFile = new File(sourceFilePath);
            bis = new BufferedInputStream(new FileInputStream(sourceFile));
            fileInfo = new FileInfo();
            byte[] fileBytes = new byte[(int) sourceFile.length()];
            // get file info
            bis.read(fileBytes, 0, fileBytes.length);
            fileInfo.setFilename(sourceFile.getName());
            fileInfo.setDataBytes(fileBytes);
          
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if(bis != null)
            bis.close();
            
        }
        return fileInfo;
    }
    
      
    
    
    
    
    
    
    


    public ChatForm() throws HeadlessException {
    }
    
    
    
    
    
    
    
    public static SimpleDateFormat format = new SimpleDateFormat("[hh:mm a]");
    private Socket clientSocket;
    private int PORT;
    private PrintWriter out;
    private String UserName;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Anrgy;
    private javax.swing.JButton CamButton;
    private javax.swing.JFileChooser ChooserFile;
    private javax.swing.JTextField InputMessage;
    private javax.swing.JLabel Love;
    private javax.swing.JButton MicButton;
    private javax.swing.JPanel Pane;
    private javax.swing.JLabel Sad;
    private javax.swing.JTextPane ViewMessage;
    private javax.swing.JLabel Wow;
    private javax.swing.JPanel emojiPane;
    private javax.swing.JButton emotion;
    private javax.swing.JLabel happy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel like;
    private javax.swing.JLabel nameRoom;
    private javax.swing.JButton sFileButton;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

}